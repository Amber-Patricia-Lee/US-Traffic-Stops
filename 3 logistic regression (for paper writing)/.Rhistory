tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# %>% drop_na()
# print(sunset_times)
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
return(dataset)
}
baby_night_day <- function(dataset, coord_city_df, window_of_stop) {
dataset_name <- as.data.frame(dataset)$name[1]
# filter for lat/long information of dataset
coord_city_df <- coord_city_df %>% filter(name == dataset_name)
# intialize lat, long, tz information
tmp_lat <- coord_city_df$lat[1]
tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
return(dataset)
}
lapply(baby_cleaned_datasets, baby_night_day, coordinates_city_df, 30)
add_dusk_sunset <- function(dataset, coord_city_df, window_of_stop) {
# window of stop has MINUTES units
dataset_name <- as.data.frame(dataset)$name[1]
# filter for lat/long information of dataset
coord_city_df <- coord_city_df %>% filter(name == dataset_name)
# intialize lat, long, tz information
tmp_lat <- coord_city_df$lat[1]
tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
return(dataset)
}
middle_cleaned_datasets <- lapply(begin_cleaned_datasets, add_dusk_sunset, coordinates_city_df, 30)
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
library(tidyverse)
library(lubridate)
library(stringr)
library(geofacet)
library(XML)
library(RCurl)
library(lutz)
library(suncalc)
con <- dbConnect(
MySQL(), host = "traffic.st47s.com", user = "student",
password = "Sagehen47", dbname = "traffic")
# use with regression_functions.R from Oliver. the ones I needed are pasted below
is_relevant <- function(data_table_entry, variables_of_interest){
# cancenate SQL query string
command <- paste("EXPLAIN", data_table_entry, sep = " ")
field_vector <- unlist(as.list(DBI::dbGetQuery(con, command))$Field,
use.names = FALSE)
# of_interest_book is TRUE iff field_vector contains all the variables of interest
of_interest_bool <- setequal(intersect(field_vector, variables_of_interest),
variables_of_interest)
# add dataset name to vector if of_interest_bool
if(of_interest_bool){
return(TRUE)
} else {
return(FALSE)
}
}
is_full <- function(df, variables_of_interest){
is_full_check <- TRUE
for(var in variables_of_interest){
# check that variables aren't all NAs
if(all(is.na(df[,var]))){
is_full_check <- FALSE
}
}
return(is_full_check)
}
get_relevant_full_names <- function(i, variables_of_interest, random_sample_percent){
# check if dataset incldues variables_of_interest using is_relevant function
if(is_relevant(all_dataset_names[[i]], variables_of_interest)){
tmp_var_string <- paste(variables_of_interest, collapse = ", ")
# command for querying data
command <- paste("SELECT", tmp_var_string, "FROM",
all_dataset_names[[i]], "WHERE rand() <=", random_sample_percent, sep = " ")
tmp_df <- DBI::dbGetQuery(con, command)
# check that variables_of_interest are actually recorded
if(is_full(tmp_df, variables_of_interest)){
# append dataset name to global variable relevant_data
relevant_dataset_names[[i]] <<- all_dataset_names[[i]]
# record data set name for future string splicing
tmp_df$name <- all_dataset_names[[i]]
return(tmp_df)
} else {
return(NA)
}
} else {
return(NA)
}
}
get_cityNames <- function(name){
# extract name of dataset
check <- str_extract(name, "[a-z]+")
if(check == "statewide"){
return(state.name[grep(str_sub(name, 1,2), state.abb)])
} else {
return(check)
}
}
# scraper function to fetch coordinates from city string
get_coordinates <- function(city){
# city is a string
url_str <- paste("http://www.google.com/search?q=latitude+and+longitude+of+",
city, sep = "")
doc <- htmlParse(getURL(url_str))
# class = BNeawe iBp4i AP7Wnd retrieves the coordinates
coordinates <- xpathSApply(doc, "//div[@class='BNeawe iBp4i AP7Wnd']", xmlValue)[1]
clean_coordinates <- str_split(coordinates, ", ")[[1]]
# use regular expressions to extract lat and lng
lat <- as.numeric(str_extract(clean_coordinates[1], "\\d+\\.*\\d*"))
# multiple long by -1 b/c...?
long <- -1*as.numeric(str_extract(clean_coordinates[2], "\\d+\\.*\\d*"))
final_coordinates <- c(lat, long)
return(final_coordinates)
}
# helpfer function for add_day_night
time_to_minute <- function(time){
hour(hms(time)) * 60 + minute(hms(time))
}
# helper function for add_day_night
oursunriseset <- function(latitude, longitude, date, timezone, direction) {
date.lat.long <- data.frame(date = date, lat = latitude, lon = longitude)
if(direction == "sunset"){
# call getSunlightTimes from the lutz package
getSunlightTimes(data = date.lat.long, keep=direction, tz=timezone)$sunset
} else if(direction == "sunrise"){
getSunlightTimes(data = date.lat.long, keep=direction, tz=timezone)$sunri
} else if (direction == "dusk"){
getSunlightTimes(data = date.lat.long, keep=direction, tz=timezone)$dusk
} else if (direction == "dawn"){
getSunlightTimes(data = date.lat.long, keep=direction, tz=timezone)$dawn
}
}
# retrieve all data set names, global variable for get_relevant_full_names
all_dataset_names <- as.list(DBI::dbGetQuery(con, "SHOW TABLES"))$Tables_in_traffic
variables_of_interest = c("subject_age", "subject_race", "subject_sex", "time", "date", "type", "search_conducted", "outcome")
# global variable necessary for get_relevant_full_names
relevant_dataset_names <- c()
datasets <- lapply(seq(all_dataset_names), get_relevant_full_names, variables_of_interest, .15)
# remove na's
datasets <- datasets[!is.na(datasets)]
relevant_dataset_names <- relevant_dataset_names[!is.na(relevant_dataset_names)]
# parse through dataset name
relevant_dataset_names <- as.data.frame(relevant_dataset_names) %>%
mutate(name = as.character(relevant_dataset_names),
state = substr(name, start = 1, stop = 2),
# city variable will be "statewide" if data set isn't city level
city = ifelse(str_detect(name, "statewide"), state,
str_extract(substr(name, start = 3, stop = nchar(name)),
"[a-z]+")))
# pittsburgh and plano are both uggo, will be removed thru data cleaning
# datasets
# relevant_dataset_names
begin_clean <- function(dataset, drop_arrest_bool){
dataset <- dataset %>%
filter(
type == "vehicular",
subject_sex == "male" | subject_sex == "female",
subject_race == "black" | subject_race == "white" | subject_race == "hispanic",
!is.na(time) & time != "NA",
!is.na(date) & date != "NA") %>%
mutate(
subject_age = as.numeric(subject_age),
subject_sex = as.factor(case_when(
subject_sex == "male" ~ "M",
subject_sex == "female" ~ "F")),
subject_race = as.factor(case_when(
subject_race == "white" ~ "W",
subject_race == "black" ~ "B",
subject_race == "hispanic" ~ "H")),
minute_of_stop = time_to_minute(time)) %>%
filter(!is.na(subject_age))
# mutate search_conducted, when recorded as T/F, to be numeric
if(typeof(dataset$search_conducted) == "character"){
dataset <- dataset %>%
mutate(search_conducted = case_when(search_conducted == "TRUE" ~ 1,
search_conducted == "FALSE" ~ 0))
}
# filter out stops that resulted in arrests
# note: i include stops that have outcome recorded NA
if(drop_arrest_bool){
dataset <- dataset %>% filter(outcome != "arrest" | is.na(outcome))
}
# return NA for empty dataset
if(dim(dataset)[1] == 0){
return(NA)
}
return(dataset)
}
begin_cleaned_datasets <- lapply(datasets, begin_clean, TRUE)
begin_cleaned_datasets <- begin_cleaned_datasets[!is.na(begin_cleaned_datasets)]
# find lat/long information using get_coordinates function and relevant_dataset_names df
coordinates_list <- lapply(as.list(relevant_dataset_names$city), get_coordinates)
# bind lat/long information with relevant_dataset_names
coordinates_city_df <- data.table::transpose(data.frame(coordinates_list)) %>%
rename(lat = V1, long = V2) %>%
bind_cols(relevant_dataset_names[2:4])
# coordinates_city_df is a necessary global variable for add_dusk_sunset function
# temp_dataset <- baby_cleaned_datasets[[4]]
# coordinates_city_df %>% filter(name == baby_cleaned_datasets[[4]]$name[1])
# hi
# tmp_lat <- hi$lat[1]
# tmp_long <- hi$long[1]
# time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
#
# temp_sunset_times <-
#   temp_dataset %>% distinct(date) %>% mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
#   mutate(
#     sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
#     dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
#     sunset = format(sunset, "%H:%M:%S"),
#     dusk = format(dusk, "%H:%M:%S"),
#     minute_of_sunset = time_to_minute(sunset),
#     minute_of_dusk = time_to_minute(dusk))
#
# temp_dataset <- temp_dataset %>%
#     mutate(date=as.Date(ymd(date, tz = time_zone))) %>%
#     left_join(temp_sunset_times, by="date")
#
# temp_dataset %>%
#   mutate(sunset_dusk = as.factor(
#     case_when(minute_of_stop - minute_of_sunset > 0 & minute_of_stop - minute_of_sunset < 30 ~ "before sunset",
#               minute_of_stop - minute_of_dusk > 0 & minute_of_stop - minute_of_dusk < 30 ~ "after dusk",
#               TRUE ~ "other")))
add_dusk_sunset <- function(dataset, coord_city_df, window_of_stop) {
# window of stop has MINUTES units
dataset_name <- as.data.frame(dataset)$name[1]
# filter for lat/long information of dataset
coord_city_df <- coord_city_df %>% filter(name == dataset_name)
# intialize lat, long, tz information
tmp_lat <- coord_city_df$lat[1]
tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
return(dataset)
}
middle_cleaned_datasets <- lapply(begin_cleaned_datasets, add_dusk_sunset, coordinates_city_df, 30)
# finished cleaning when BPP variable joined
middle_clean_datasets
middle_cleaned_datasets
begin_cleaned_datasets[[18]]
DBI::dbGetQuery(con, "SELECT TXplano")
DBI::dbGetQuery(con, "SELECT (*) FROM TXplano")
DBI::dbGetQuery(con, "SELECT * FROM TXplano")
TXplano <- DBI::dbGetQuery(con, "SELECT * FROM TXplano")
TXplano %>% select(variables_of_interest)
TXplano <- TXplano %>% select(variables_of_interest)
TXplano
TXplano %>%
filter(!is.na(subject_age))
TXplano %>%
filter(!is.na(subject_age)) %>%
filter(!is.na(time))
middle_cleaned_datasets[[18]]
dim(middle_cleaned_datasets[[18]])
dim(middle_cleaned_datasets[[18]])[1]
add_dusk_sunset <- function(dataset, coord_city_df, window_of_stop) {
# window of stop has MINUTES units
dataset_name <- as.data.frame(dataset)$name[1]
# filter for lat/long information of dataset
coord_city_df <- coord_city_df %>% filter(name == dataset_name)
# intialize lat, long, tz information
tmp_lat <- coord_city_df$lat[1]
tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
# filter out if not enough data points
if(dim(dataset)[1] < 100){
return(NA)
}
return(dataset)
}
middle_cleaned_datasets <- lapply(begin_cleaned_datasets, add_dusk_sunset, coordinates_city_df, 30)
middle_cleaned_datasets
middle_cleaned_datasets[!is.na(middle_cleaned_datasets)]
add_dusk_sunset <- function(dataset, coord_city_df, window_of_stop) {
# window of stop has MINUTES units
dataset_name <- as.data.frame(dataset)$name[1]
# filter for lat/long information of dataset
coord_city_df <- coord_city_df %>% filter(name == dataset_name)
# intialize lat, long, tz information
tmp_lat <- coord_city_df$lat[1]
tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
# filter out if not enough data points
if(dim(dataset)[1] < 50){
return(NA)
}
return(dataset)
}
middle_cleaned_datasets <- lapply(begin_cleaned_datasets, add_dusk_sunset, coordinates_city_df, 30)
middle_cleaned_datasets
add_dusk_sunset <- function(dataset, coord_city_df, window_of_stop) {
# window of stop has MINUTES units
dataset_name <- as.data.frame(dataset)$name[1]
# filter for lat/long information of dataset
coord_city_df <- coord_city_df %>% filter(name == dataset_name)
# intialize lat, long, tz information
tmp_lat <- coord_city_df$lat[1]
tmp_long <- coord_city_df$long[1]
time_zone <- lutz::tz_lookup_coords(tmp_lat, tmp_long, warn = F)
# df for sunset and dusk times for distinct stops
sunset_times <- dataset %>%
distinct(date) %>%
mutate(date = as.Date(ymd(date, tz = time_zone)),
sunset = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "sunset"),
dusk = oursunriseset(tmp_lat, tmp_long, date, time_zone, direction = "dusk"),
sunset = format(sunset, "%H:%M:%S"),
dusk = format(dusk, "%H:%M:%S"),
minute_of_sunset = time_to_minute(sunset),
minute_of_dusk = time_to_minute(dusk))
# filter dataset for stops occurring during window_of_stop
dataset <- dataset %>%
mutate(date = as.Date(ymd(date, tz = time_zone))) %>%
left_join(sunset_times, by="date") %>%
# check if stop occurred within window_of_stop length from dusk or sunset
mutate(sunset_dusk = as.factor(
case_when(minute_of_stop - minute_of_sunset > 0 &
minute_of_stop - minute_of_sunset < window_of_stop ~ "before sunset",
minute_of_stop - minute_of_dusk > 0 &
minute_of_stop - minute_of_dusk < window_of_stop ~ "after dusk",
TRUE ~ "other"))) %>%
filter(sunset_dusk != "other")
# filter out if not enough data points
if(dim(dataset)[1] < 200){
return(NA)
}
return(dataset)
}
middle_cleaned_datasets
middle_cleaned_datasets <- middle_cleaned_datasets[!is.na(middle_cleaned_datasets)]
rbind(middle_cleaned_datasets)
lapply(middle_cleaned_datasets, rbind)
middle_cleaned_datasets[[3]][1]
middle_cleaned_datasets[[3]][1:]
middle_cleaned_datasets[[3]][,1]
head(middle_cleaned_datasets[[3]], 1)
BPP_data_collection_helper <- function(dataset){
dataset <- dataset %>%
mutate(year = as.numeric(lubridate::year(date)),
earliest_year = min(year),
latest_year = max(year)) %>%
select(dataset, earliest_year, latest_year) %>%
head(1)
return(dataset)
}
years_BPP_data_collection <- lapply(middle_cleaned_datasets, BPP_data_collection_helper)
BPP_data_collection_helper <- function(dataset){
dataset <- dataset %>%
mutate(year = as.numeric(lubridate::year(date)),
earliest_year = min(year),
latest_year = max(year)) %>%
select(dataset, earliest_year, latest_year) %>%
head(1)
return(dataset)
}
years_BPP_data_collection <- lapply(middle_cleaned_datasets, BPP_data_collection_helper)
middle_cleaned_datasets <- middle_cleaned_datasets[!is.na(middle_cleaned_datasets)]
BPP_data_collection_helper <- function(dataset){
dataset <- dataset %>%
mutate(year = as.numeric(lubridate::year(date)),
earliest_year = min(year),
latest_year = max(year)) %>%
select(dataset, earliest_year, latest_year)
return(dataset)
}
years_BPP_data_collection <- lapply(middle_cleaned_datasets, BPP_data_collection_helper)
middle_cleaned_datasets <- lapply(begin_cleaned_datasets, add_dusk_sunset, coordinates_city_df, 30)
middle_cleaned_datasets
BPP_data_collection_helper <- function(dataset){
dataset <- dataset %>%
mutate(year = as.numeric(lubridate::year(date)),
earliest_year = min(year),
latest_year = max(year)) %>%
select(name, earliest_year, latest_year) %>%
head(1)
return(dataset)
}
years_BPP_data_collection <- lapply(middle_cleaned_datasets, BPP_data_collection_helper)
years_BPP_data_collection <- bind_rows(years_BPP_data_collection, .id = "column_label")
years_BPP_data_collection
write.csv(years_BPP_data_collection, "years_BPP_data_collection.csv")
