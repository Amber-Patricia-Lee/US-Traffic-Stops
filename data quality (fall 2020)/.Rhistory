ggplot(aes(x = `<NA>`)) +
geom_point(aes(y = black, fill = "pink")) +
geom_point(aes(y = white, fill = "teal"))
smrRace %>% spread(key = subject_race, value = avg_SMR) %>%
ggplot(aes(x = `<NA>`)) +
geom_point(aes(y = black, color = "pink")) +
geom_point(aes(y = white, color = "teal"))
smrRace %>% spread(key = subject_race, value = avg_SMR) %>%
ggplot(aes(x = `<NA>`)) +
geom_point(aes(y = black - white))
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white)
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white) %>%
gather(key = "subject_race", "avg_smr", 2:3)
smrRace %>%
spread(key = subject_race, value = avg_SMR)
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white, `<NA>`) %>%
gather(key = "subject_race", "avg_smr", 2:4)
(smrRace %>% filter(is.na(subject_race))
)
(smrRace %>% filter(is.na(subject_race)))
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR)
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR) %>%
rename(SMR_NA = `<NA>`)
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white)
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR) %>%
rename(SMR_NA = `<NA>`) %>%
left_join(
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white),
by = "dataset_name"
)
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR) %>%
rename(SMR_NA = `<NA>`) %>%
left_join(
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white),
by = "dataset_name"
) %>%
gather(key = "recorded race", value = "avg_SMR", 3:4)
ggplot(aes(x = SMR_NA)) +
geom_point(aes(y = avg_SMR, color = recorded_race))
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR) %>%
rename(SMR_NA = `<NA>`) %>%
left_join(
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white),
by = "dataset_name"
) %>%
gather(key = "recorded race", value = "avg_SMR", 3:4) %>%
ggplot(aes(x = SMR_NA)) +
geom_point(aes(y = avg_SMR, color = recorded_race))
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR) %>%
rename(SMR_NA = `<NA>`) %>%
left_join(
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white),
by = "dataset_name"
) %>%
gather(key = "recorded race", value = "avg_SMR", 3:4)
smrRace %>%
filter(is.na(subject_race)) %>%
spread(key = subject_race, value = avg_SMR) %>%
rename(SMR_NA = `<NA>`) %>%
left_join(
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
select(dataset_name, black, white),
by = "dataset_name"
) %>%
gather(key = "recorded_race", value = "avg_SMR", 3:4) %>%
ggplot(aes(x = SMR_NA)) +
geom_point(aes(y = avg_SMR, color = recorded_race))
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
ggplot(aes(x = white, y = black)) +
geom_point()
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
ggplot(aes(x = white, y = black)) +
geom_point() +
geom_abline() +
scale_x_continuous(limits = c(0, 0.5)) +
scale_y_continuous(limits = c(0, 0.5)) +
smrRace %>%
spread(key = subject_race, value = avg_SMR) %>%
ggplot(aes(x = white, y = black)) +
geom_point() +
geom_abline() +
scale_x_continuous(limits = c(0, 0.5)) +
scale_y_continuous(limits = c(0, 0.5))
# 15 most frequently recorded variables
freq_var <- data.frame("var" = unlist(lapply(dataset_lst, function(dataset) names(dataset)))) %>%
group_by(var) %>%
summarize(count = n(), .groups = "drop") %>%
# drop type (either pedestrian or vehicular)
filter(var != "type" & str_detect(var, "row", negate = TRUE)) %>%
# could make this function that returns top n var
slice_max(count, n = 16) %>%
pull(var)
freq_var
# 15 most frequently recorded variables
freq_var <- data.frame("var" = unlist(lapply(dataset_lst, function(dataset) names(dataset)))) %>%
group_by(var) %>%
summarize(count = n(), .groups = "drop") %>%
# drop type (either pedestrian or vehicular)
filter(var != "type" & str_detect(var, "row", negate = TRUE)) %>%
# n = 16 because dataset_name is a variable
slice_max(count, n = 11) %>%
pull(var)
freq_var
# 15 most frequently recorded variables
freq_var <- data.frame("var" = unlist(lapply(dataset_lst, function(dataset) names(dataset)))) %>%
group_by(var) %>%
summarize(count = n(), .groups = "drop") %>%
# drop type (either pedestrian or vehicular)
filter(var != "type" & str_detect(var, "row", negate = TRUE)) %>%
# n = 16 because dataset_name is a variable
slice_max(count, n = 16) %>%
pull(var)
freq_var
length(lapply(dataset_lst, myfilter_for, freq_var))
myfilter_for <- function(dataset, var_vect, need_containment){
# if need_containment is true, then function only returns
# datasets containing ALL variables specified in var_vect
# need_containment = TRUE results in more restrictive filtering
dataset_var <- names(dataset)
intersection <- var_vect[var_vect %in% dataset_var]
if (need_containment){
if (length(intersection) == length(var_vect)) {
# embrace syntax from dplyr programming
return(dataset %>% dplyr::select({{ var_vect }}))
} else {
return(NULL)
}
} else if (!need_containment){
if (length(intersection > 0)) {
# embrace syntax from dplyr programming
return(dataset %>% dplyr::select({{ intersection }}))
} else{
return(NULL)
}
}
}
length(lapply(dataset_lst, myfilter_for, freq_var))
length(lapply(dataset_lst, myfilter_for, freq_var, FALSE))
length(lapply(dataset_lst, myfilter_for, freq_var, TRUE))
length(lapply(dataset_lst, myfilter_for, freq_var, TRUE))
freq_lst <- lapply(dataset_lst, myfilter_for, freq_var, FALSE)
freq_lst <- freq_lst[sapply(freq_lst, function(x) isTRUE(nrow(x) > 0))]
freq_lst <- lapply(dataset_lst, myfilter_for, freq_var, TRUE)
freq_lst <- freq_lst[sapply(freq_lst, function(x) isTRUE(nrow(x) > 0))]
# 15 most frequently recorded variables
freq_var <- data.frame("var" = unlist(lapply(dataset_lst, function(dataset) names(dataset)))) %>%
group_by(var) %>%
summarize(count = n(), .groups = "drop") %>%
# drop type (either pedestrian or vehicular)
filter(var != "type" & str_detect(var, "row", negate = TRUE)) %>%
# n = 16 because dataset_name is a variable
slice_max(count, n = 11) %>%
pull(var)
freq_var
# 15 most frequently recorded variables
freq_var <- data.frame("var" = unlist(lapply(dataset_lst, function(dataset) names(dataset)))) %>%
group_by(var) %>%
summarize(count = n(), .groups = "drop") %>%
# drop type (either pedestrian or vehicular)
filter(var != "type" & str_detect(var, "row", negate = TRUE)) %>%
# n = 16 because dataset_name is a variable
slice_max(count, n = 11) %>%
pull(var)
freq_var
freq_lst <- lapply(dataset_lst, myfilter_for, freq_var, TRUE)
freq_lst <- freq_lst[sapply(freq_lst, function(x) isTRUE(nrow(x) > 0))]
count_datasets <- function(dataset_lst, var_vect){
dataset_lst <- lapply(dataset_lst, myfilter_for, var_vect, TRUE)
dataset_lst <- dataset_lst[sapply(dataset_lst, function(x) isTRUE(nrow(x) > 0))]
return(length(dataset_lst))
}
count_datasets(dataset_lst, "search_conducted")
count_datasets(dataset_lst, "arrest_made")
lapply(dataset_lst, countMissing, 1, FALSE)
ggplot_datasetsize <- function(dataset_lst){
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(dataset_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram()
return(p)
}
ggplot_datasetsize(dataset_lst)
ggplot_datasetsize <- function(dataset_lst){
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(dataset_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram(bins = 10)
return(p)
}
ggplot_datasetsize(dataset_lst)
sapply(dataset_lst, function(x) dim(x)[1])
data.frame(n = sapply(dataset_lst, function(x) dim(x)[1])) %>%
ggplot(aes(x = log(n))) +
geom_histogram()
data.frame(n = sapply(dataset_lst, function(x) dim(x)[1])) %>%
ggplot(aes(x = log(n))) +
geom_histogram(bin = 10)
data.frame(n = sapply(dataset_lst, function(x) dim(x)[1])) %>%
ggplot(aes(x = log(n))) +
geom_histogram(bin = 5)
data.frame(n = sapply(dataset_lst, function(x) dim(x)[1])) %>%
ggplot(aes(x = log(n))) +
geom_histogram(bins = 10)
ggplot_datasetSMR <- function(dataset_lst, var_vect){
error_lst <- lapply(dataset_lst, myfilter_for, var_vect, FALSE)
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(error_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram(bins = 10)
return(p)
}
ggplot_datasetsize(dataset_lst, freq_var)
ggplot_datasetSMR <- function(dataset_lst, var_vect){
error_lst <- lapply(dataset_lst, myfilter_for, var_vect, FALSE)
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(error_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram(bins = 10)
return(p)
}
ggplot_datasetSMR(dataset_lst, freq_var)
ggplot_datasetSMR <- function(dataset_lst, var_vect){
error_lst <- lapply(dataset_lst, myfilter_for, var_vect, FALSE)
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(error_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram(bins = 5)
return(p)
}
ggplot_datasetSMR(dataset_lst, freq_var)
ggplot_datasetSMR <- function(dataset_lst, var_vect){
error_lst <- lapply(dataset_lst, myfilter_for, var_vect, FALSE)
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(error_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram(bins = 8)
return(p)
}
ggplot_datasetSMR(dataset_lst, freq_var)
# 15 most frequently recorded variables
freq_var <- data.frame("var" = unlist(lapply(dataset_lst, function(dataset) names(dataset)))) %>%
group_by(var) %>%
summarize(count = n(), .groups = "drop") %>%
# drop type (either pedestrian or vehicular)
filter(var != "type" & str_detect(var, "row", negate = TRUE)) %>%
# n = 16 because dataset_name is a variable
slice_max(count, n = 16) %>%
pull(var)
freq_var
ggplot_datasetSMR <- function(dataset_lst, var_vect){
# only select the frequent variables to better compare!
error_lst <- lapply(dataset_lst, myfilter_for, var_vect, FALSE)
summarizeAvgSMR <- function(dataset){
dataset <- dataset %>%
group_by(dataset_name) %>%
summarize(avg_SMR = mean(stop_missing_rate))
}
error_lst <- lapply(error_lst, countMissing, 1, FALSE)
error_lst <- lapply(error_lst, summarizeAvgSMR)
p <- bind_rows(error_lst) %>%
ggplot(aes(x = avg_SMR)) +
geom_histogram(bins = 8)
return(p)
}
ggplot_datasetSMR(dataset_lst, freq_var)
how_are_outcomes_recorded <- function(outcome_str, dataset_lst, want_type){
outcome_sym <- sym(outcome_str)
outcome_lst <- lapply(dataset_lst, myfilter_for, outcome_str, TRUE)
outcome_lst <- outcome_lst[sapply(outcome_lst, function(x) isTRUE(nrow(x) > 0))]
if (want_type) {
outcomes <- lapply(outcome_lst, function(x) typeof(x[1,]))
return(outcomes)
}
outcomes_lst <- lapply(outcome_lst,
function(x) x %>% distinct(!!outcome_sym) %>% pull(!!outcome_sym))
return(outcomes_lst)
}
outcomes_type <- lapply(c("warning_issued", "citation_issued", "arrest_made", "search_conducted", "summon_issued"), how_are_outcomes_recorded, dataset_lst, TRUE)
outcomes_recorded <- lapply(list("warning_issued", "citation_issued", "arrest_made", "search_conducted", "summon_issued"), how_are_outcomes_recorded, dataset_lst, FALSE)
data.frame(type = unlist(outcomes_type)) %>% distinct()
data.frame(recorded = unlist(outcomes_recorded)) %>% distinct()
outcome_clean <- function(dataset, str_outcome){
if(typeof(dataset[[str_outcome]]) == "character"){
sym_outcome = sym(str_outcome)
dataset <- dataset %>%
mutate(!!sym_outcome := case_when(!!sym_outcome == "FALSE" ~ 0,
!!sym_outcome == "TRUE" ~ 1,
!!sym_outcome == "0" ~ 0,
!!sym_outcome == "1" ~ 1))
}
return(dataset)
}
outcome_abbreviation <- function(str_outcome, for_NA){
# returns an abbreviation for str_outcome
# for example, arrest_made becomes .am
first_word <- str_split(str_outcome, "_")[[1]][1]
second_word <- str_split(str_outcome, "_")[[1]][2]
abb <- paste(".", substr(first_word, 1, 1), substr(second_word, 1, 1), sep = "")
if(!for_NA){
return(abb)
}
# if for_NA, then tack on an NA
abbNA <- paste(abb, "NA", sep = "")
return(abbNA)
}
outcome_abbreviation("warning_issued", TRUE)
makeDF.RaceOutcome <- function(str_outcome, dataset_lst){
sym_outcome <- sym(str_outcome)
# 1. filter for 3 variables
outcome_lst <- lapply(dataset_lst, myfilter_for,
c("dataset_name", "subject_race", str_outcome), TRUE)
outcome_lst <- outcome_lst[sapply(outcome_lst, function(x) isTRUE(nrow(x) > 0 ))]
# 2. clean
outcome_lst <- lapply(outcome_lst, outcome_clean, str_outcome)
# 3. make df
outcome_df <- data.frame(bind_rows(outcome_lst))
# 4. numerator by counting total stops per outcome level and race group
outcome_counts <- outcome_df %>%
group_by(dataset_name, subject_race, !!sym_outcome) %>%
summarize(count = n(), .groups = "drop") %>%
spread(key = !!sym_outcome, value = count)
# 5. denominators and other relevant statistics
# 5a. total stops per data set
total_stops <- outcome_df %>%
group_by(dataset_name) %>%
summarize(total_stops = n(), .groups = "drop")
# 5b. total stops per racial group
total_stops_race <- outcome_df %>%
group_by(dataset_name, subject_race) %>%
summarize(total_stops_race = n(), .groups = "drop")
# 5c. total stops NA (race and outcome)
total_na_race <- total_stops_race %>%
filter(is.na(subject_race)) %>%
rename(total_na_race = total_stops_race) %>%
select(-subject_race)
total_na_outcome <- outcome_counts %>%
group_by(dataset_name) %>%
summarize(total_na_outcome = sum(`<NA>`, na.rm = TRUE), .groups = "drop")
# 6. calculate rates
all_rates <- outcome_counts %>%
left_join(total_stops_race, by = c("dataset_name", "subject_race")) %>%
# outcome == 1 denotes that the outcome happened
# ex: search_conducted == 1 means that a search was conducted
mutate(outcome_rate = `1` / total_stops_race,
NA_outcome_rate = `<NA>` / total_stops_race) %>%
select(dataset_name, subject_race, outcome_rate, NA_outcome_rate)
sc_rate <- all_rates %>%
select(-NA_outcome_rate) %>%
spread(key = subject_race, value = outcome_rate) %>%
rename(`missing race` = `<NA>`)
scNA_rate <- all_rates %>%
select(-outcome_rate) %>%
spread(key = subject_race, value = NA_outcome_rate) %>%
rename(`missing race` = `<NA>`)
# 7a. make abbreviation
abb <- outcome_abbreviation(str_outcome, FALSE)
abbNA <- outcome_abbreviation(str_outcome, TRUE)
# 7b. join
outcome_race_df <- sc_rate %>%
left_join(scNA_rate, by = "dataset_name", suffix = c(abb, abbNA)) %>%
left_join(total_stops, by = "dataset_name") %>%
left_join(total_na_race, by = "dataset_name") %>%
mutate(total_na_race = ifelse(is.na(total_na_race), 0, total_na_race)) %>%
left_join(total_na_outcome, by = "dataset_name") %>%
mutate(outcome = paste(unlist(str_split(str_outcome, "_")), collapse = " "))
return(outcome_race_df)
}
raceoutcomes_lst <- lapply(c("warning_issued", "citation_issued",
"search_conducted", "arrest_made"),
makeDF.RaceOutcome, dataset_lst)
raceoutcomes_lst
racesc_df <- raceoutcomes_lst[[3]]
raceam_df <- raceoutcomes_lst[[4]]
ggplot(data = racesc_df, aes(x = `<NA>`, y = black)) +
geom_point
ggplot(data = racesc_df, aes(x = `<NA>`, y = black)) +
geom_point()
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
geom_point()
racesc_df <- raceoutcomes_lst[[3]]
raceam_df <- raceoutcomes_lst[[4]]
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
geom_point()
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = white.sc)) +
geom_point()
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
geom_point() +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1))
racesc_df
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
geom_point(aes(size = total_na_race/total_stops, color = log(total_stops))) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1))
default.point <- list(geom_point(aes(size = total_na_race/total_stops, color = log(total_stops))) +
geom_abline() +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)))
default.point <- list(geom_point(aes(size = total_na_race/total_stops,
color = log(total_stops))),
geom_abline(),
scale_x_continuous(limits = c(0, 1)),
scale_y_continuous(limits = c(0, 1)))
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
default.point
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
default.point
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = white.sc)) +
default.point
ggplot(data = raceam_df, aes(x = `missing race.am`, y = black.am)) +
default.point
ggplot(data = raceam_df, aes(x = `missing race.am`, y = white.am)) +
default.point
raceci_df <- raceoutcomes_lst[[2]]
raceci_df <- raceoutcomes_lst[[2]]
racesc_df <- raceoutcomes_lst[[3]]
raceam_df <- raceoutcomes_lst[[4]]
default.point <- list(geom_point(aes(size = total_na_race/total_stops,
color = log(total_stops))),
geom_abline(),
scale_x_continuous(limits = c(0, 1)),
scale_y_continuous(limits = c(0, 1)))
ggplot(data = raceci_df, aes(x = `missing race.wi`, y = black.wi)) +
default.point
raceci_df <- raceoutcomes_lst[[2]]
racesc_df <- raceoutcomes_lst[[3]]
raceam_df <- raceoutcomes_lst[[4]]
default.point <- list(geom_point(aes(size = total_na_race/total_stops,
color = log(total_stops))),
geom_abline(),
scale_x_continuous(limits = c(0, 1)),
scale_y_continuous(limits = c(0, 1)))
ggplot(data = raceci_df, aes(x = `missing race.ci`, y = black.ci)) +
default.point
ggplot(data = raceci_df, aes(x = `missing race.ci`, y = white.ci)) +
default.point
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = black.sc)) +
default.point
ggplot(data = racesc_df, aes(x = `missing race.sc`, y = white.sc)) +
default.point
ggplot(data = raceam_df, aes(x = `missing race.am`, y = black.am)) +
default.point
ggplot(data = raceam_df, aes(x = `missing race.am`, y = white.am)) +
default.point
lapply(dataset_lst, remove_empty_col)
