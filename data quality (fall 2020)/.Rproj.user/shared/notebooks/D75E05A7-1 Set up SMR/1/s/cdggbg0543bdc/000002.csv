"0",""
"0","check_missing <- function(n_threshold, df){"
"0","  "
"0","  col <- df %>% "
"0","    mutate(""isMissing_{{ n_threshold }}"" := case_when(missing >= n_threshold ~ TRUE,"
"0","                                                TRUE ~ FALSE)) %>%"
"0","    select(starts_with(""isMissing""))"
"0",""
"0","  return(col)"
"0",""
"0","}"
"0",""
"0","countMissing <- function(dataset, n_threshold, exclude_bool, exclude_var){"
"0","  # <n_threshold> is used to classify the observations with"
"0","  # at least n_threshold missing values as completely missing"
"0","  "
"0","  # <exclude_var> is str specifying which variables we don't count for NA's"
"0",""
"0","  n_var <- dim(dataset)[2]"
"0","  "
"0","  if (exclude_bool){"
"0","    missing <- list(missing = rowSums(is.na(dataset %>% select(-all_of(exclude_var)))))"
"0","    "
"0","  } else {"
"0","    missing <- list(missing = rowSums(is.na(dataset)))"
"0","    "
"0","  }"
"0","  "
"0","  dataset <- dataset %>%"
"0","    bind_cols(list(missing), .id = NULL) %>% "
"0","    mutate(stop_missing_rate = missing/n_var)"
"0","  "
"0","  dataset <- dataset %>%"
"0","    # check_missing operates on dataset with missingness already counted"
"0","    bind_cols(lapply(1:n_threshold, check_missing, dataset))"
"0"," "
"0","  return(as.data.frame(dataset))"
"0",""
"0","}"
"0",""
"0","missing_lst <- lapply(dataset_lst, countMissing, 1, FALSE)"
"0",""
